[{"content":"In this series im going over the opensource project called braxme. This post is about the coding style of braxme and some trivial security holes I found. The source code can be found on github.com.\nCoding style That brings me to the first big problem i have with braxme: The coding style. There is no inherent structure, project wide or only in a single file. There are also barely any comments, variable names get thrown all over the place, user input doesnt get sanitized properly, \u0026hellip;\nBut lets not get ahead of ourselves and carefully dissect the problems with an example.\nExample im using this example. Im going through all the code for transparency.\nini_set(\u0026#39;session.cookie_httponly\u0026#39;, 1); ini_set(\u0026#39;session.use_only_cookies\u0026#39;, 1); session_start(); Ok, so the project uses php sessions with cookies. However: because security relevant ini variables didnt get set globally and only on a file to file basis and attacker could bypass the httponly if they find a public file that calls session_start()\twithout the httponly flag. Im not 100% certain that you can bypass httponly that way so i\u0026rsquo;ll have to research further before making any final conclusions.\nThe httponly flag also does NOT protect you from csrf so you would need a csrf protection to protect yourself from malicious embedding.\n/* INSTALLFOLDER IS HARDCODED HERE */ require_once(\u0026#34;prod/config.php\u0026#34;); Ummmm\u0026hellip;.\nWhere is that file? It seems to not exist.\n$s = \u0026#39;\u0026#39;; $gcm = \u0026#39;\u0026#39;; $apn = \u0026#39;\u0026#39;; $uuid = \u0026#39;\u0026#39;; $l = \u0026#39;\u0026#39;; $e = \u0026#39;\u0026#39;; $a = \u0026#34;\u0026#34;; $h = \u0026#34;\u0026#34;; $store = \u0026#34;\u0026#34;; $v = \u0026#34;\u0026#34;; $action = \u0026#34;\u0026#34;; $l = @mysql_safe_string($_GET[\u0026#39;l\u0026#39;]); $e = @mysql_safe_string($_GET[\u0026#39;e\u0026#39;]); $s = @mysql_safe_string($_GET[\u0026#39;s\u0026#39;]); $gcm = @mysql_safe_string($_GET[\u0026#39;gcm\u0026#39;]); $apn = @mysql_safe_string($_GET[\u0026#39;apn\u0026#39;]); $a = @mysql_safe_string($_GET[\u0026#39;a\u0026#39;]); $h = @mysql_safe_string($_GET[\u0026#39;h\u0026#39;]); $v = @mysql_safe_string($_GET[\u0026#39;v\u0026#39;]); $store = @mysql_safe_string($_GET[\u0026#39;store\u0026#39;]); $uuid = \u0026#34;\u0026#34;; This causes me physical pain and is called code smell. 11 variables without ANY explanaition whatsoever; lets go through it anyway and document their use.\nvariables that do nothing (Dead code):\n$l $e $uuid with that out of the way, lets go through the other variables and explain them:\n$a is an action that you set (for example $a = logout logs you out) $s gets added to $source $gcm gets added to $source if its non-empty $apn behaves exactly like $gcm $a can be set to \u0026ldquo;logout\u0026rdquo; which causes the client to set localStorage.pid = '';. $h gets added to $source as well $store same with $h $v gets injected into JS (DANGEROUS) if($a==\u0026#39;logout\u0026#39;){ $action=\u0026#34;\u0026lt;script\u0026gt;localStorage.pid = \u0026#39;\u0026#39;;\u0026lt;/script\u0026gt;\u0026#34;; } if($s==\u0026#39;\u0026#39;){ $source=\u0026#34;?s=nonmobile\u0026amp;h=$h\u0026#34;; } else { if($v == \u0026#39;\u0026#39;){ $v = \u0026#34;000\u0026#34;; } if($gcm!=\u0026#39;\u0026#39;){ $source=\u0026#34;?s=$s\u0026amp;gcm=$gcm\u0026amp;h=$h\u0026amp;store=$store\u0026amp;v=\u0026#34;; } else if($apn!=\u0026#39;\u0026#39;){ $source=\u0026#34;?s=$s\u0026amp;apn=$apn\u0026amp;h=$h\u0026amp;store=$store\u0026amp;v=\u0026#34;; } else { $source=\u0026#34;?s=$s\u0026amp;h=$h\u0026amp;store=$store\u0026amp;v=\u0026#34;; } } This part is explained above: some variables get concatenated to others.\n$login = \u0026#34;login.php\u0026#34;.$source; Dead code AGAIN! The $login variable does not do ANYTHING\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Brax.Me\u0026lt;/title\u0026gt; \u0026lt;META HTTP-EQUIV=\u0026#39;Pragma\u0026#39; CONTENT=\u0026#39;no-cache\u0026#39;\u0026gt; \u0026lt;META HTTP-EQUIV=\u0026#39;Expires\u0026#39; CONTENT=\u0026#39;-1\u0026#39;\u0026gt; \u0026lt;meta name=\u0026#39;viewport\u0026#39; content=\u0026#39;width=device-width, height=device-height, initial-scale=1, user-scalable=0, maximum-scale=1\u0026#39;\u0026gt; \u0026lt;link rel=\u0026#39;icon\u0026#39; href=\u0026#39;https://brax.me/img/favicon.ico\u0026#39; type=\u0026#39;image/x-icon\u0026#39;\u0026gt; \u0026lt;link rel=\u0026#39;shortcut icon\u0026#39; href=\u0026#39;https://brax.me/img/favicon.ico\u0026#39; type=\u0026#39;image/x-icon\u0026#39;\u0026gt; \u0026lt;link rel=\u0026#39;apple-touch-icon\u0026#39; href=\u0026#39;https://brax.me/img/lock2.png\u0026#39;\u0026gt; \u0026lt;link rel=\u0026#39;stylesheet\u0026#39; href=\u0026#39;$rootserver/libs/jquery-1.11.1/jquery-ui.css\u0026#39;\u0026gt; \u0026lt;script src=\u0026#39;\u0026lt;?=$rootserver?\u0026gt;/libs/jquery-1.11.1/jquery.min.js\u0026#39; \u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#39;\u0026lt;?=$rootserver?\u0026gt;/libs/jquery-1.11.1/jquery-ui.js\u0026#39; \u0026gt;\u0026lt;/script\u0026gt; \u0026lt;meta name=\u0026#34;description\u0026#34; content=\u0026#34;Brax.Me - Private Communities\u0026#34;\u0026gt; html skeleton code\nYou might have realized at first glance that a mysterious php variable called $rootserver suddenly appeared. I dont know where it comes from but it seems to be a config.php variable. Its bad codestyle either way for following reasons:\nit doesnt get used consistently. Sometimes https://brax.me is prepended, sometimes its $rootserver. its unneded. Relative paths are way more robust and make your code more portable and readable. What seems to lack in general are templates. I dont want to get into too much detail as this is offtopic but it would greatly increase the code and security quality if the copypasta is replaced by an actual robust template.\n\u0026lt;?=$action?\u0026gt; Why? the $action is completely unnecesary and makes the code much harder to read. As explained above the $action is either a fixed string or empty. An if could have solved this string mess.\n\u0026lt;/head\u0026gt; \u0026lt;body style=\u0026#39;background-color:whitesmoke;color:black\u0026#39;\u0026gt; Loading... \u0026lt;!-- \u0026lt;a href=\u0026#39;\u0026#39;\u0026gt;Start \u0026lt;/a\u0026gt; --\u0026gt; \u0026lt;script\u0026gt; start of the body (i analyze the javascript seperately)\nHere are two things wrong:\nThe CSS is inside the html is in my opinion a bad coding style though that can be debated. Commented out code should be deleted (this is called code smell as it rots and drags down your codebase) var rootserver1 = \u0026#39;\u0026lt;?=$rootserver?\u0026gt;\u0026#39;; var login = \u0026#39;\u0026lt;?=$source?\u0026gt;\u0026#39;; if(\u0026#39;\u0026lt;?=$v?\u0026gt;\u0026#39;!==\u0026#39;000\u0026#39; \u0026amp;\u0026amp; \u0026#39;\u0026lt;?=$v?\u0026gt;\u0026#39;!==\u0026#39;\u0026#39;){ localStorage.mobileversion = \u0026#39;\u0026lt;?=$v?\u0026gt;\u0026#39;; //alert(localStorage.mobileversion); } vlocation = rootserver1+\u0026#34;/prod/login.php\u0026#34;+login+localStorage.mobileversion; //alert(vlocation); window.location = vlocation; First lets talk about the code again then the implications. The snippet again shows some codesmell:\nmagic numbers commented out code The code does NOT sanitize ANY attacker controlled input, so lets analyze what exploits you can build. This is where things get interesting\u0026hellip;\nFirst exploit if i control $rootserver, $source or $v i can inject arbitrary JS. All i need is to escape the \u0026rsquo; string in JS.\nTrivial XSS Lets go through a step by step example of such a XSS attack. Anyone familiar with XSS attacks can probably skip this part.\nHere is an example:\nl.php?h=%27;alert(%22XSS%22);// How it works We know from above that only setting $h will execute following part of the code:\n$source=\u0026#34;?s=nonmobile\u0026amp;h=$h\u0026#34;; [removed unnecesary code]\nvar login = \u0026#39;\u0026lt;?=$source?\u0026gt;\u0026#39;; Now the PHP interpreter sets $source to the value from above:\nvar login = \u0026#39;?s=nonmobile\u0026amp;h=\u0026#39;;alert(\u0026#34;XSS\u0026#34;);//\u0026#39;; That is beautified:\nvar login = \u0026#39;?s=nonmobile\u0026amp;h=\u0026#39;; alert(\u0026#34;XSS\u0026#34;); // \u0026#39;; As I previously stated that attack is pretty trivial and should not happen to a seasoned programmer.\nConclusion TL;DR: the Code contains dead code, copypasted code, \u0026hellip; and other atrocities that no seasoned programmer should EVER do. The code is also HIGHLY insecure and should be considered amateur work at best. The commented out code reminds me more of my friends code when he started coding than anything I consider production ready, so I highly advise you to NOT use this code in production.\n","permalink":"https://1nc1n3r470r.github.io/posts/braxme-readthrough/","summary":"In this series im going over the opensource project called braxme. This post is about the coding style of braxme and some trivial security holes I found. The source code can be found on github.com.\nCoding style That brings me to the first big problem i have with braxme: The coding style. There is no inherent structure, project wide or only in a single file. There are also barely any comments, variable names get thrown all over the place, user input doesnt get sanitized properly, \u0026hellip;","title":"BraxMe Deep Dive Part 1: Bad Coding Style and first Exploits"},{"content":"Hi there this is just a quick hello world test to test github pages\n","permalink":"https://1nc1n3r470r.github.io/posts/first/","summary":"Hi there this is just a quick hello world test to test github pages","title":"First"}]